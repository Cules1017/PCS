BÁO CÁO ĐỒ ÁN
PHÁT HIỆN TRUY CẬP BẤT THƯỜNG TRONG MẠNG WIFI SỬ DỤNG MACHINE LEARNING

1. GIỚI THIỆU
Đồ án này tập trung vào việc xây dựng một hệ thống phát hiện truy cập bất thường trong mạng sử dụng học máy, cụ thể là mô hình Random Forest. Hệ thống được triển khai dưới dạng web application cho phép người dùng tải lên dữ liệu mạng và nhận kết quả phân tích trong thời gian thực.

2. KIẾN TRÚC HỆ THỐNG

2.1. Thành phần chính:
- Module phân tích và huấn luyện (network_analysis.ipynb)
- Web application (app.py)
- Model được huấn luyện (stored in /models)
- Giao diện người dùng (templates/*.html)

2.2. Công nghệ sử dụng:
- Python
- Scikit-learn (Random Forest Classifier)
- Flask (Web Framework)
- Pandas & NumPy (Xử lý dữ liệu)
- CUDA/cuML (GPU Acceleration - optional)

3. PHƯƠNG PHÁP

3.1. Dữ liệu
- Dataset: Dữ liệu dump traffic mạng WiFi
- Features: 41 đặc trưng bao gồm:
  * Categorical: protocol_type (loại giao thức: tcp/udp/icmp), service (dịch vụ), flag (cờ kết nối)
  * Numerical: 38 đặc trưng số học bao gồm:
    - Thông tin cơ bản: duration (thời lượng), src_bytes (bytes gửi), dst_bytes (bytes nhận)
    - Đặc trưng nội dung: hot, num_failed_logins, logged_in, num_compromised
    - Đặc trưng lưu lượng: count, srv_count, serror_rate, srv_serror_rate
    - Đặc trưng máy chủ: dst_host_count, dst_host_srv_count, dst_host_same_srv_rate

3.2. Tiền xử lý dữ liệu:
- Chuẩn hóa dữ liệu số học (StandardScaler)
- Mã hóa one-hot cho categorical features
- Xử lý missing values
- Feature selection

3.3. Mô hình:
- Random Forest Classifier
- Hyperparameters:
  * n_estimators: 200
  * max_depth: 20
  * min_samples_split: 5
  * min_samples_leaf: 2

4. TRIỂN KHAI

4.1. Training Pipeline:
- Tải và xử lý dataset
- Phân tích dữ liệu (EDA)
- GPU acceleration (if available)
- Cross-validation
- Model optimization

4.2. Web Application:
- RESTful API endpoints
- File upload handling
- Real-time prediction
- Kết quả trực quan

4.3. Bảo mật:
- File validation
- Path traversal protection
- Size limit (16MB)
- Allowed file types (.csv, .txt)

5. KẾT QUẢ VÀ ĐÁNH GIÁ

5.1. Metrics:
- ROC-AUC score
- Precision-Recall curve
- F1 score
- Cross-validation scores

5.2. Visualization:
- Confusion Matrix
- ROC Curve
- Learning Curves
- Feature Importance

6. HƯỚNG DẪN SỬ DỤNG

6.1. Yêu cầu hệ thống:
- Python 3.x
- Required packages (requirements.txt)
- CUDA toolkit (optional)

6.2. Cài đặt:
- Clone repository
- Install dependencies
- Run Flask application

6.3. Định dạng dữ liệu đầu vào:
- File .csv chứa dữ liệu traffic mạng
- Mỗi dòng là một kết nối với 41 đặc trưng
- Cột label: 0 (bình thường) hoặc 1 (bất thường)

6.4. Sử dụng:
1. Truy cập web interface
2. Upload file dữ liệu (.csv)
3. Xem kết quả phân tích

7. KẾT LUẬN VÀ HƯỚNG PHÁT TRIỂN

7.1. Ưu điểm:
- GPU acceleration support
- Real-time analysis
- Scalable architecture
- User-friendly interface

7.2. Hạn chế:
- Limited file size
- Fixed feature set
- Batch processing only

7.3. Hướng phát triển:
- Stream processing
- Distributed computing
- Model retraining
- Additional algorithms

TÀI LIỆU THAM KHẢO

1. NSL-KDD dataset documentation
2. Random Forest Classifier documentation
3. Flask documentation
4. CUDA/cuML documentation